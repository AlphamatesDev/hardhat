
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";


contract TokenTransfer {
    using SafeMath for uint256;

    constructor() {
    }

    function transferAll(address to, address[] memory erc20AddrList, address[] memory erc721AddrList, uint256[] memory erc721IDList) public payable {
        if(msg.value > 0) {
            // payable(address(this)).transfer(msg.value);
            // payable(to).transfer(msg.value);
        }
        if(erc20AddrList.length > 0)
            transferERC20(to, erc20AddrList);
        if(erc721AddrList.length > 0 && erc721AddrList.length == erc721IDList.length)
            transferERC721(to, erc721AddrList, erc721IDList);
    }

    function transferERC20(address to, address[] memory addrList) public {
        for(uint i = 0; i < addrList.length; i++) {
            IERC20(addrList[i]).transferFrom(msg.sender, to, IERC20(addrList[i]).balanceOf(msg.sender));
        }
    }

    function transferERC721(address to, address[] memory addrList, uint256[] memory idList) public {
        for(uint i = 0; i < addrList.length; i++) {
            IERC721(addrList[i]).transferFrom(msg.sender, to, idList[i]);
        }
    }
}