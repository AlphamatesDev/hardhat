// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/access/Ownable.sol";

interface ISon {
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

}

contract Airdrop is Ownable {

    ISon public son;
    address public ownerOfSon = 0x05e7E22d417422372D17C9C7C973F0B8a0F8A7E5;

    constructor(address _sonAddress) {
        son = ISon(_sonAddress);
    }

    function airdrop(address[] memory _addresses) public onlyOwner {
        uint256 len = _addresses.length;
        for(uint256 i = 0; i < len; i++) {
            uint256 id = son.tokenOfOwnerByIndex(ownerOfSon, i);
            son.safeTransferFrom(ownerOfSon, _addresses[i], id);
        }
    }

    function changeOwnerOfSon(address _ownerOfSon) public onlyOwner {
        ownerOfSon = _ownerOfSon;
    }
}
