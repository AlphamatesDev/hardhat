// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "hardhat/console.sol";

pragma solidity ^0.8.0;

contract Genesis is ERC721Enumerable, Ownable {

    using Strings for uint256;

    string public baseTokenURI;
    string public baseExtension = ".json";
    string public hiddenTokenURI;
    

    uint256 public maxSupply = 8778;
    uint256 public preSaleSupply = 3000;
    uint256 public maxCollection = 5;
    uint256 public maxAirdropSupply = 3000;

    bool public isPublicSaleActive = false;
    bool public paused = false;
    bool public isFree = false;

    bool public isTokenHidden = true;
    uint256 public prePrice = 0.065 ether;
    uint256 public pubicPrice = 0.075 ether;

    // Payment Addresses
    address constant wallet1 = 0x8c78a3B72B90Ec170e718B3c5308e7481A67EB08;

    bytes32 public merkleRootWL = 0x299933cac28b9df1ae6dbf7f5d9814b5fe409a67795ed15dea6135b5fe78c6e3;
    bytes32[7] public merkleRootTypes;
    uint256 private luciverseId = 0;
    uint256 public airdropSupply;

    uint256 public revealTime = 0;

    /**
    * @dev Throws if called by any account is not whitelisted.
    */
    modifier onlyNotPaused() {
        require(!paused, 'Contract is paused.');
        _;
    }
    
    constructor() ERC721("Genesis", "GN") {
        //setBaseURI(baseURI);
    }

    function setMerkleRootTypes(bytes32[] memory _types) public onlyOwner {
        require(_types.length == 7, "Exceeded the array number.");
        for(uint256 i = 0; i < 7; i++) {
            merkleRootTypes[i] = _types[i];
        }
    }

    function getType(bytes32[] calldata _merkleProof,  uint256 _id) external view returns(uint256) {
        require(_exists(_id), "ERC721Metadata: URI query for nonexistent token");
        if(luciverseId == _id) return 7;
        bytes32 leaf = keccak256(abi.encodePacked(_id.toString()));
        for(uint256 i = 0; i < 7; i++) {
            if(MerkleProof.verify(_merkleProof, merkleRootTypes[i], leaf)) {
                return i;
            }
        }
        return 8;
    }

    function setLuciverseId(uint256 _id) public onlyOwner {
        luciverseId = _id;
    }

    function price() public view returns (uint256) {
        if (isPublicSaleActive) {
            return pubicPrice;
        } else {
            return prePrice;
        }
    }

    function setPublicSale() public onlyOwner {
        isPublicSaleActive = true;
    }

    function setPreSale() public onlyOwner {
        isPublicSaleActive = false;
    }

    function mint(bytes32[] calldata _merkleProof,  address _to) public payable onlyNotPaused {
        uint256 supply = totalSupply();
        uint256 tokenCount = balanceOf(msg.sender);

        require(tokenCount < maxCollection, string(abi.encodePacked('You can only mint ', maxCollection.toString(), ' cards per wallet')));

        if(!isPublicSaleActive) { //is presale
            bytes32 leaf = keccak256(abi.encodePacked(_to));
            require(MerkleProof.verify(_merkleProof, merkleRootWL, leaf), 'Sorry, this address is not on the whitelist. Please message us on Discord.');
        }
        require(supply < maxSupply, 'This transaction would exceed max supply of queen');
        require(msg.value >= price(), 'Ether value is too low');

        if (supply < maxSupply) {
            _safeMint(_to, supply + 1);
        }

        require(payable(owner()).send(msg.value));
    }

    function setMerkleRoot(bytes32 _merkleRootWL) public onlyOwner{
        merkleRootWL = _merkleRootWL;
    }

    function freeMint() external onlyOwner onlyNotPaused {
        require(isFree,                                 'Free mint is not active.');
        uint256 supply = totalSupply();
        for (uint i=0; i<maxSupply-totalSupply(); i++) {
            if (totalSupply() < maxSupply) {
                _safeMint(msg.sender, supply + i);
            }
        }
    }

    function airDrop(address[] memory addresses) external onlyOwner onlyNotPaused {
        uint256 supply = totalSupply();
        require(airdropSupply + addresses.length <= maxAirdropSupply,       'This transaction would exceed airdrop max supply');
        require(supply + addresses.length <= maxSupply, 'This transaction would exceed max supply');
        for(uint8 i=0; i<addresses.length; i++) {
            _safeMint(addresses[i], supply + i);
            airdropSupply += 1;
        }
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseTokenURI;
    }
    function _hiddenURI() internal view virtual returns (string memory) {
        return hiddenTokenURI;
    }
    
    function revealToken() public onlyOwner {
        isTokenHidden = false;
        revealTime = block.timestamp;
    }

    function getRevealTime() external view returns (uint256) {
        return revealTime;
    }

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId),               "ERC721Metadata: URI query for nonexistent token");

        string memory currentBaseURI = isTokenHidden ? _hiddenURI() : _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        tokenId.toString(),
                        baseExtension
                    )
                )
                : "";
    }

    function setBaseURI(string memory baseURI) public onlyOwner {
        baseTokenURI = baseURI;
    }
    function setHiddenURI(string memory baseURI) public onlyOwner {
        hiddenTokenURI = baseURI;
    }

    function setPrice(uint256 _max_price, uint256 _min_price) public onlyOwner {
        pubicPrice = _max_price;
        prePrice = _min_price;
    }
    
    function setBaseExtension(string memory _base_extension) public onlyOwner {
        baseExtension = _base_extension;
    }

    function pause(bool _state) public onlyOwner {
        paused = _state;
    }

    function setIsFree(bool _state) public onlyOwner {
        isFree = _state;
    }

    function tokensOfOwner(address owner) public view returns (uint256[] memory) {
        uint256 tokenCount = balanceOf(owner);
        uint256[] memory tokenIds = new uint256[](tokenCount);
        for (uint256 i = 0; i < tokenCount; i++) {
            tokenIds[i] = tokenOfOwnerByIndex(owner, i);
        }
        return tokenIds;
    }
    
    //https://etherscan.io/address/0xAFeF885027A59603dfF7837C280DaD772c476b82#code    
    function withdraw() public payable onlyOwner {
        require(payable(owner()).send(address(this).balance));
    }
    
    // function info() public view returns (uint256, uint256, uint256, uint256, uint256) {
    //     return (price(), preSaleStartDate, publicStartDate, totalSupply(), maxSupply);
    // }
}